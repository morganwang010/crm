// Code generated by sqlgen. DO NOT EDIT!

package model

import (
	"context"
	"fmt"

	"gorm.io/gorm"
)

// UserModel represents a user model.
type UserModel struct {
	db *gorm.DB
}

// User represents a user struct data.
type User struct {
	EmployeeNumber string `gorm:"column:employee_number" json:"employeeNumber"`
	RoleName       string `gorm:"column:role_name" json:"roleName"`
	CreateTime     string `gorm:"column:create_time" json:"createTime"`
	UpdateTime     string `gorm:"column:update_time" json:"updateTime"`
	Password       string `gorm:"column:password" json:"password"`
	IsActive       string `gorm:"column:is_active" json:"isActive"`
	Type           string `gorm:"column:type" json:"type"`
	Mail           string `gorm:"column:mail" json:"mail"`
	OrgId          int32  `gorm:"column:org_id" json:"orgId"`
	OrgName        string `gorm:"column:org_name" json:"orgName"`
	Id             int32  `gorm:"column:id;primaryKey" json:"id"`
}

// TableName returns the table name. it implemented by gorm.Tabler.
func (User) TableName() string {
	return "user"
}

// NewUserModel returns a new user model.
func NewUserModel(db *gorm.DB) *UserModel {
	return &UserModel{db: db}
}

// Create creates  user data.
func (m *UserModel) Create(ctx context.Context, data ...*User) error {
	if len(data) == 0 {
		return fmt.Errorf("data is empty")
	}

	db := m.db.WithContext(ctx)
	list := data[:]
	return db.Create(&list).Error
}

// FindAll is generated from sql:
// select * from user;
func (m *UserModel) FindAll(ctx context.Context) ([]*User, error) {
	var result []*User
	var db = m.db.WithContext(ctx)
	db = db.Select(`*`)
	db = db.Find(&result)
	return result, db.Error
}
